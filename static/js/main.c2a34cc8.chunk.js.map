{"version":3,"sources":["Components/Navbar.js","Components/Search.js","Components/CurrentWeather.js","Components/Forecasts.js","Components/TestComponent.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Navbar","this","props","load","dets","cityName","countryCode","className","id","dt_txt","Component","Search","type","onChange","handleSubmit","onClick","handleChange","CurrentWeather","temp","parseInt","main","max","temp_max","min","temp_min","windSpeed","wind","speed","humidity","pressure","src","weather","icon","alt","description","Forecasts","keyNum","time","onclick","split","getForecastId","TestComponent","state","value","country","details","keyId","isLoaded","isError","bind","e","setState","target","preventDefault","a","axios","get","then","res","data","city","name","list","splice","catch","err","response","request","newDetails","firstDetails","navDetails","white","color","textAlign","slice","console","log","map","navDets","key","style","detxx","detx","keyIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c2a34cc8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component{\r\n    render(){\r\n        const { load, dets, cityName, countryCode } = this.props;\r\n        return(\r\n            <div className=\"App\">\r\n        {load ?\r\n            <nav id=\"view-nav\">\r\n        <div className=\"city-detail\">\r\n            <p className=\"cty-date\">\r\n                {dets.dt_txt}\r\n            </p>\r\n            <h3 className=\"city-name\">\r\n            {cityName}, {countryCode}\r\n            </h3>\r\n        </div>\r\n    </nav>\r\n    :\r\n        <nav> \r\n        Search for a city\r\n        </nav>\r\n        \r\n        }\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Search extends Component{\r\n    render(){\r\n        return(\r\n        <header>\r\n        <div className=\"user-input\">\r\n            <div className=\"search\">\r\n                <input type=\"text\" className=\"input\" onChange={this.props.handleSubmit}/>\r\n                <button className=\"submit-btn\" onClick={this.props.handleChange}><i className=\"fas fa-search\"></i></button>\r\n            </div>\r\n        </div> \r\n        </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\n\r\nclass CurrentWeather extends Component{\r\n    render(){\r\n        const { dets, cityName } = this.props;\r\n        // console.log(dets)\r\n        let temp = parseInt(dets.main.temp) - 273;\r\n        let max = parseInt(dets.main.temp_max) - 273; \r\n        let min = parseInt(dets.main.temp_min) - 273; \r\n        let windSpeed = dets.wind.speed;\r\n        let humidity = dets.main.humidity;\r\n        let pressure = dets.main.pressure;\r\n        return(\r\n            <div>\r\n            \r\n            <section className=\"weather-results\">\r\n            {\r\n        <div className=\"results\">\r\n            <p className=\"country-name\">{cityName}</p>\r\n            <div className=\"weather-icon\">\r\n            <img src={`http://openweathermap.org/img/wn/${dets.weather[0].icon}@2x.png`} alt=\"weather-icons\"/>\r\n            </div>\r\n            <div className=\"temp-details\">\r\n                <p className=\"temp-num\">\r\n                    {temp}&deg;\r\n                </p>\r\n                <span className=\"temp-name\">{dets.weather[0].description}</span>\r\n            </div>\r\n        </div>\r\n}\r\n    </section>\r\n\r\n    <section className=\"other-results\">\r\n        <div className=\"container\">\r\n            <div className=\"weather-icon\">\r\n            <img src={`http://openweathermap.org/img/wn/${dets.weather[0].icon}@2x.png`} alt=\"weather-icons\"/>\r\n            </div>\r\n            <div className=\"results\">\r\n                <div className=\"max\">\r\n                 Max/Min:   {max}&deg;/{min}&deg;\r\n                </div>\r\n                <div className=\"wind\">\r\n                   Wind: {windSpeed}m/s\r\n                </div>\r\n                <div className=\"humidity\">\r\n                   Humidity: {humidity}%\r\n                </div>\r\n                <div className=\"pressure\">\r\n                   Pressure: {pressure}hPa\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n    \r\n    \r\n    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CurrentWeather;","import React, { Component } from 'react';\r\n\r\nclass Forecasts extends Component{\r\n    \r\n    \r\n\r\n\r\n    render(){\r\n        const { dets, keyNum, onclick } = this.props;\r\n        // this.setState({key: keyNum})\r\n        // console.log(dets)\r\n        let time = dets.dt_txt.split(\" \");\r\n        time = time[1];\r\n        let temp = parseInt(dets.main.temp) - 273;\r\n        return(\r\n            <div className=\"updates\" onClick={() => this.props.getForecastId(keyNum)}>\r\n            {/* {console.log(keyNum)} */}\r\n                <div className=\"weather-icon\">\r\n                <img src={`http://openweathermap.org/img/wn/${dets.weather[0].icon}@2x.png`} alt=\"weather-icons\"/>\r\n                </div>\r\n                <div className=\"time\">\r\n                    <p>{time}</p>\r\n                </div>\r\n                <div className=\"temp\">\r\n                    <h3>{temp}&deg;</h3>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecasts;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n//Children Components\r\nimport Navbar from './Navbar.js';\r\nimport Search from './Search.js';\r\nimport CurrentWeather from './CurrentWeather.js';\r\nimport Forecasts from './Forecasts.js';\r\n\r\nclass TestComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value: \"\",\r\n            cityName: \"\",\r\n            country: \"\",\r\n            details: [ ],\r\n            keyId: 0,\r\n            isLoaded: false,\r\n            isError: false\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleSubmit(e){\r\n        this.setState({value: e.target.value})\r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n    async handleChange(){\r\n       await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${this.state.value}&appid=e239749ee684f1001a49bdbf304aa404`)\r\n       .then(res => {\r\n        //    console.log(res);\r\n           this.setState({\r\n               cityName: res.data.city.name,\r\n               country: res.data.city.country,\r\n               details: res.data.list.splice(0, 4),\r\n               isLoaded: true,\r\n               isError: false\r\n           })\r\n           \r\n       }\r\n       ).catch(err => {\r\n        if (err.response) {\r\n        // client received an error response (5xx, 4xx)\r\n        this.setState({isError: true})\r\n      } else if (err.request) {\r\n        // client never received a response, or request never left\r\n        this.setState({isError: true})\r\n      } else {\r\n        this.setState({isError: true})\r\n        // anything else\r\n      }\r\n   })\r\n    }\r\n\r\n\r\n    render(){\r\n        const { details, cityName, keyId, isLoaded, country, isError } = this.state;\r\n        let newDetails, firstDetails, navDetails = [ ];\r\n        const white = {\r\n            color: \"white\",\r\n            textAlign: \"center\"\r\n        }\r\n        const error =  <div style={white}>\r\n                            <h1>\r\n                                Invalid input, try again\r\n                            </h1>\r\n                        </div>\r\n        return(\r\n            <div>\r\n            <div>\r\n            {navDetails = details.slice(keyId, keyId + 1), console.log(navDetails)}\r\n            { isLoaded? \r\n                navDetails.map((navDets, key) => {\r\n                return(\r\n                <Navbar load={isLoaded} dets = {navDets} key={key} cityName={cityName} countryCode={country}/>\r\n                )\r\n            })\r\n            : <Navbar />\r\n            }\r\n            <Search handleSubmit = {this.handleSubmit} handleChange={this.handleChange} /> \r\n             \r\n            {  firstDetails = details.slice(keyId, keyId + 1), console.log(firstDetails) }\r\n            {   isError ? <div style={white}>\r\n                            <h1>\r\n                                Invalid input, try again\r\n                            </h1>\r\n                        </div> :\r\n                firstDetails.map((detxx, key) => {\r\n                return(\r\n                    <CurrentWeather dets = {detxx} key={key} cityName={cityName} />\r\n                )\r\n            })}\r\n            {console.log(details)}\r\n            <section className=\"hourly-updates\">\r\n                <div className=\"view-containers\">\r\n                    {  newDetails = details.slice(0, 3), console.log(newDetails) }\r\n                        { isError? null :\r\n                            newDetails.map( (detx, key) => {\r\n                            {/* console.log(detx, \"KeyId: \", keyId, country ) */}\r\n                        return(\r\n                            <Forecasts dets = {detx} keyNum = {key} getForecastId = {keyIndex => this.setState({keyId: keyIndex}) } />      \r\n                        )        \r\n                    })}\r\n                </div>\r\n            </section>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TestComponent;","import './Assets/Index.css';\n\n//Components\nimport TestComponent from './Components/TestComponent';\n\nfunction App() {\n  return (\n    <TestComponent />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}